pipeline {
  agent {
    docker {
      args '-v $HOME/.gradle:$HOME/.gradle'
      image 'cimg/openjdk:13.0'
    }
  }
  triggers {
    cron('15 4 * * 6')
  }

  environment {
    googleapi_key = credentials('googleapi_key')
    jasypt_encryptor_password = credentials('JASYPT_ENCRYPTOR_PASSWORD')
  }

  stages {
    stage('get version in build.gradle') {
        steps {
            script {
                env.version = sh (
                    script: "./gradlew properties -q | grep \"version:\" | awk '{print \$2}'",
                    returnStdout: true
                ).trim()
                sh "echo Building project in version: $version"
            }
        }
    }
    stage('build and test') {
      steps {
        script {
            sh 'chmod +x gradlew'
            sh './gradlew clean dependencies check jacocoTestReport assemble'
            publishHTML (target: [
              reportDir: 'build/reports/jacoco/test/html',
              reportFiles: 'index.html',
              reportName: "JaCoCo Report"
            ])
            junit 'build/test-results/test/*.xml'
        }
      }
    }

    stage("Docker build") {
      when { not { triggeredBy 'TimerTrigger' } }
      environment {
        DOCKER_LOGIN = credentials('DOCKER_LOGIN')
        docker_image_tag = "${version}-${env.BUILD_NUMBER}"
      }
      steps {
        sh "docker build -t thcathy/web-parser-rest:latest -t thcathy/web-parser-rest:${docker_image_tag} -f Dockerfile ."
        sh "docker login -u $DOCKER_LOGIN_USR -p $DOCKER_LOGIN_PSW"
        sh "docker push thcathy/web-parser-rest:latest"
        sh "docker push thcathy/web-parser-rest:${docker_image_tag}"
      }
    }

    stage("deploy and verify UAT") {
      when {
        branch 'master'
        not { triggeredBy 'TimerTrigger' }
      }
      environment {
        DEPLOY_USER = 'thcathy'
        docker_image_tag = "${version}-${env.BUILD_NUMBER}"
      }
      agent {
        docker {
          image 'ansible/ansible-runner'
        }
      }
      steps {
        ansiblePlaybook(
          inventory: 'ansible/inventory_uat',
          limit: 'uat',
          extras: "-e docker_image_tag=${docker_image_tag} -e jasypt_encryptor_password=${jasypt_encryptor_password}",
          playbook: 'ansible/deploy.yml',
          credentialsId: 'Jenkins-master'
        )
      }
    }
  }

}
