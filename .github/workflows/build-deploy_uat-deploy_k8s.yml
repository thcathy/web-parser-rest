name: build and deploy to UAT

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '15 4 * * 6'

env:
  jasypt_encryptor_password: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
  googleapi_key: ${{ secrets.googleapi_key }}
  dictionaryapi_key: ${{ secrets.dictionaryapi_key }}

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2
      with:
        arguments: check assemble
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        junit_files: "build/test-results/test/*.xml"
    - name: Archive Production Artifact
      uses: actions/upload-artifact@master
      with:
        name: build
        path: build
  docker:
    runs-on: ubuntu-latest
    environment: UAT
    needs: [build-test]
    if: github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@master
      with:
        name: build
        path: build
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    - name: Set Release version env variable
      run: |
        echo "RELEASE_VERSION=$(./gradlew properties -q | grep 'version:' | awk '{print $2}')" >> $GITHUB_ENV
    - name: Set docker image tag env variable
      run: |
        echo "DOCKER_IMAGE_TAG=${{ env.RELEASE_VERSION }}-${{ github.run_number }}" >> $GITHUB_ENV
    - uses: docker/setup-qemu-action@v2
    - uses: docker/setup-buildx-action@v2
    - uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - uses: docker/build-push-action@v3
      with:
        push: true
        context: .
        file: Dockerfile
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/web-parser-rest:latest,${{ secrets.DOCKERHUB_USERNAME }}/web-parser-rest:${{ env.DOCKER_IMAGE_TAG }}
        platforms: linux/amd64,linux/arm64
  uat:
    runs-on: ubuntu-latest
    needs: [docker]
    steps:
    - name: Run ansible playbook to deploy and verify UAT
      uses: dawidd6/action-ansible-playbook@v2
      with:    
        playbook: ansible/deploy.yml
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        vault_password: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
        options: |
          --inventory ansible/inventory_uat
          --limit uat          
          -e docker_image_tag=${{ env.DOCKER_IMAGE_TAG }}
          -e jasypt_encryptor_password=${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
  deploy-k8s:
    runs-on: ubuntu-latest
    needs: [docker]
    steps:
    - name: Run ansible playbook to deploy and verify k8s UAT
      uses: dawidd6/action-ansible-playbook@v2
      with:
        playbook: ansible/deploy-k8s.yml
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        vault_password: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
        options: |
          --inventory ansible/inventory_k8s-uat
          --limit k8s-uat
          -e docker_image_tag=${{ env.DOCKER_IMAGE_TAG }}
          -e jasypt_encryptor_password=${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
    - name: Run ansible playbook to deploy and verify k8s PROD
      uses: dawidd6/action-ansible-playbook@v2
      with:
        playbook: ansible/deploy-k8s.yml
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        vault_password: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
        options: |
          --inventory ansible/inventory_k8s-prod
          --limit k8s-prod
          -e docker_image_tag=${{ env.DOCKER_IMAGE_TAG }}
          -e jasypt_encryptor_password=${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
